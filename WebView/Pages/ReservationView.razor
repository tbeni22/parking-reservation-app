@page "/reserve"
@inject IReservation reservationService

<div style="text-align: center;" class="title-section">
    <h2 style="font-weight: bold">Foglalások</h2>
    <h4>Új foglalás</h4>
</div>

<div class="container mt-4 mb-3">
    <div class="card shadow" style="border: #E0F2F1;">
        <div class="card-body" style="background-color: #E0F2F1;">
            <div class="row">
                <div class="form-group col-sm-3 mb-3">
                    <label class="form-check-label" for="beginning-field">
                        Kezdete:
                    </label>
                    <input id="beginning-field" class="form-control" type="datetime-local" step="3600"
                           @bind="@newReservation.Beginning" @oninput="e => DateChange(e.Value, 1)" />
                </div>
                
                <div class="form-group col-sm-3 mb-3">
                    <label class="form-check-label" for="ending-field">
                        Vége:
                    </label>
                    <input id="ending-field" class="form-control" type="datetime-local" step="3600" 
                    @bind="newReservation.Ending" @oninput="e => DateChange(e.Value, 2)" />
                </div>
                
                <div class="form-group col-sm-6 mb-3">
                    <label class="form-check-label" for="parking-place-field">
                        Parkolóhely:
                    </label>
                    <select id="parking-place-field" class="form-control" @bind="newReservation.ParkingPlaceId">
                        @foreach (var place in availablePlaces)
                        {
                            <option value="@place.ID">@place.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group col-sm-12 mb-3">
                    <label class="form-check-label" for="repeatin-reservation-field">
                        Ismétlődő foglalás:
                    </label>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions" id="yesRadio" value="yes" @onclick="() => ShowRepeatedElement(true)">
                        <label class="form-check-label" for="yesRadio">Igen</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions" id="noRadio" value="no" @onclick="() => ShowRepeatedElement(false)" checked>
                        <label class="form-check-label" for="noRadio">Nem</label>
                    </div>
                </div>
                @if (repeated)
                {
                    <div class="form-group col-sm-3 mb-3">
                        <label class="form-check-label" for="repetition-rate-field">
                            Rendszeressége:
                        </label>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="inlineRadioOptions2" id="dailyRadio" value="yes" @onclick="() => repetitionRate = RepetitionRate.Daily">
                            <label class="form-check-label" for="dailyRadio">Napi</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="inlineRadioOptions2" id="weeklyRadio" value="no" @onclick="() => repetitionRate = RepetitionRate.Weekly">
                            <label class="form-check-label" for="weeklyRadio">Heti</label>
                        </div>
                    </div>
                    <div class="form-group col-sm-1 mb-3">
                        <label class="form-check-label" for="repeate-for-field">
                            Alkalom:
                        </label>
                        <select id="repeated-field" class="form-control" @bind="repetitionNumber">
                            @for (int i = 1; i <= 10; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                }
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn" style="width: 150px;background-color: #00695C; color: white;" @onclick="Reserve">Véglegesítés</button>
            </div>
        </div>
    </div>
</div>

<h4>Meglévő foglalások</h4>
<table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Parkolóhely</th>
            <th>Időtartam</th>
            <th>Műveletek</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var reservation in reservationList)
        {
            <tr>
                <td>
                    @reservation.ParkingPlaceName
                </td>
                <td>
                    @(reservation.Beginning.ToString() + " - " + reservation.Ending.ToString())
                </td>
                <td>
                    <button class="btn" style="background-color: #00695C; color: white;" @onclick="() => Delete(reservation.ID)">
                        Törlés
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    int userId = 1; // todo: get from session

    List<ReservationDto> reservationList = new List<ReservationDto>();
    List<ParkingPlaceDto> availablePlaces = new List<ParkingPlaceDto>();

    private ReservationDto newReservation = new ReservationDto();
    private bool validDate = false;

    protected override async Task OnInitializedAsync()
    {
        newReservation.Ending = DateTime.Now;
        newReservation.Beginning = DateTime.Now;
        reservationList = await reservationService.GetReservationsForUser(userId);
        RefreshAvailablePlaces();
    }

    private void DateChange(object value, int type)
    {
        DateTime dateValue = DateTime.Parse((string)value);
        switch (type)
        {
            case 1:
                validDate = dateValue.CompareTo(newReservation.Ending) < 0;
                break;
            case 2:
                validDate = newReservation.Beginning.CompareTo(dateValue) < 0;
                break;
        }
        RefreshAvailablePlaces();
    }

    private void Delete(int id)
    {
        reservationService.DeleteReservation(id);
        int idxToRemove = reservationList.FindIndex(r => r.ID == id);
        reservationList.RemoveAt(idxToRemove);
    }

    private async Task Reserve()
    {
        if (repeated)
        {
            var data = new RepeatingReservation
                {
                    FirstOccurence = newReservation,
                    RepeateFor = repetitionNumber,
                    Rate = repetitionRate
                };

            var result = await reservationService.NewRepeatingReservation(data);
            if (!result)
            {
                // todo: display error
            }
        }
        else
        {
            var result = await reservationService.NewReservation(newReservation);
            if (result != null)
            {
                reservationList.Add(result);
                StateHasChanged();
            }
            else
            {
                // todo: display error
            }
        }
    }

    private async Task RefreshAvailablePlaces()
    {
        availablePlaces.Clear();
        if (validDate)
        {
            availablePlaces = await reservationService.GetFreeSpaces(newReservation.Beginning, newReservation.Ending);
        }

        // sample
        /*Random rnd = new Random();
        availablePlaces.Clear();
        for (int i = 0; i < 6; i++) {
            availablePlaces.Add(new ParkingPlaceDto { ID = i, Name = rnd.Next().ToString(), DisabledParking = false });
        }*/
    }

    private bool repeated = false;
    private RepetitionRate repetitionRate;
    private int repetitionNumber = 1;

    private void ShowRepeatedElement(bool button)
    {
        repeated = button;
    }
}
