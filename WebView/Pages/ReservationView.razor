@page "/reserve"
@inject IReservation reservationService

<h3>Foglalások</h3>

<h4>Új foglalás</h4>

<div class="container mt-4 mb-3">
    <div class="card border-dark">
        <div class="card-body">
            <div class="row">
                <div class="form-group col-sm-3 mb-3">
                    <label class="form-check-label" for="beginning-field">
                        Kezdete
                    </label>
                    <input id="beginning-field" class="form-control" type="datetime" 
                        @bind="newReservation.Beginning" @oninput="RefreshAvailablePlaces" />
                </div>
                <div class="form-group col-sm-3 mb-3">
                    <label class="form-check-label" for="ending-field">
                        Vége
                    </label>
                    <input id="ending-field" class="form-control" type="datetime" 
                        @bind="newReservation.Ending" @oninput="RefreshAvailablePlaces" />
                </div>
                <div class="form-group col-sm-6 mb-3">
                    <label class="form-check-label" for="parking-place-field">
                        Parkolóhely
                    </label>
                    <select id="parking-place-field" class="form-control" @bind="newReservation.ParkingPlaceId">
                        @foreach (var place in availablePlaces)
                        {
                            <option value="@place.ID">@place.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" style="width: 150px;" @onclick="Reserve">Véglegesítés</button>
            </div>
        </div>
    </div>
</div>

<h4>Meglévő foglalások</h4>
<table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Parkolóhely</th>
            <th>Időtartam</th>
            <th>Műveletek</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var reservation in reservationList)
        {
            <tr>
                <td>
                    @reservation.ParkingPlaceName
                </td>
                <td>
                    @(reservation.Beginning.ToString() + " - " + reservation.Ending.ToString())
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => Delete(reservation.ID)">
                        Törlés
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    int userId = 1; // todo: get from session

    List<ReservationDto> reservationList = new List<ReservationDto>();
    List<ParkingPlaceDto> availablePlaces = new List<ParkingPlaceDto>();

    private ReservationDto newReservation = new ReservationDto();

    protected override async Task OnInitializedAsync()
    {
        newReservation.Ending = DateTime.Now;
        newReservation.Beginning = DateTime.Now;
        reservationList = await reservationService.GetReservationsForUser(userId);
        RefreshAvailablePlaces();
    }

    private void Delete(int id)
    {
        reservationService.DeleteReservation(id);
        int idxToRemove = reservationList.FindIndex(r => r.ID == id);
        reservationList.RemoveAt(idxToRemove);
    }

    private async void Reserve()
    {
        var result = await reservationService.NewReservation(newReservation);
        if (result != null)
        {
            reservationList.Add(result);
        }
        else
        {
            // todo: display error
        }
    }

    private async void RefreshAvailablePlaces()
    {
        // todo: get from backend (no endpoint exists yet)

        // sample
        Random rnd = new Random();
        availablePlaces.Clear();
        for (int i = 0; i < 6; i++) {
            availablePlaces.Add(new ParkingPlaceDto { ID = i, Name = rnd.Next().ToString(), DisabledParking = false });
        }
    }
}
