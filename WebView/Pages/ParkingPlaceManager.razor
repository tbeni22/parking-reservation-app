@using BusinessLogic.DTOs
@using BusinessLogic.Interfaces
@using DataAccess.Data
@page "/parking-places"
@inject IParkingPlace parkingService

<style>
    .title-section {
        text-align: center;
        margin-bottom: 40px; /* Adjust the margin size as needed */
    }
</style>


<AuthorizeView Roles=@Role.ADMIN.ToString()>
    <Authorized>
        <div class="title-section" style="text-align: center">
            <h2 style="font-weight: bold">Parkolóhelyek kezelése</h2>
            <h4>Új parkolóhely felvétele</h4>
        </div>

        <div class="container mt-4 mb-3">
            <div class="card shadow" style="border: #E0F2F1;">
                <div class="card-body" style="background-color: #E0F2F1;">
                    <div class="row">
                        <div class="col-sm-3 mb-3">
                            <div class="form-group">
                                <input class="form-control" placeholder="Név" @bind="currentPlace.Name" />
                            </div>
                        </div>
                    <div class="row">
                        <div class="col-sm-6 mb-3">
                            <div class="form-check form-group">
                                <input class="form-check-input" type="checkbox" @bind="currentPlace.DisabledParking" id="disabledCheck" />
                                <label class="form-check-label" for="disabledCheck">
                                    Mozgáskorlátozott
                                </label>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-primary" style="width: 200px; background-color: #00695C; color: white;" @onclick="AddParkingPlace">Parkolóhely felvétele</button>
                    </div>
                </div>
            </div>
        </div>

        <h4>Parkolóhelyek</h4>
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Disabled Parking</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var place in parkingPlaces)
                {
                    <tr>
                        <td>@place.ID</td>
                        <td>
                            @if (editingList.Contains(place.ID))
                            {
                                <input class="form-control" @bind="@place.Name" />
                            }
                            else
                            {
                                @place.Name
                            }
                        </td>
                        <td>
                            @if (editingList.Contains(place.ID))
                            {
                                <input type="checkbox" @bind="@place.DisabledParking" />
                            }
                            else
                            {
                                @(place.DisabledParking ? "Yes" : "No")
                            }
                        </td>
                        <td>
                            <button class="btn" style="background-color: #00695C; color: white;" @onclick="() => ToggleEdit(place.ID)">
                                @if (editingList.Contains(place.ID))
                                {
                                    <span>Mentés</span>
                                }
                                else
                                {
                                    <span>Szerkesztés</span>
                                }
                            </button>
                            <button class="btn" style="background-color: #00695C; color: white;" @onclick="() => ShowReservations(place.ID)">
                                <span>Foglalások</span>
                            </button>
                            <button class="btn" style="background-color: #00695C; color: white;" @onclick="() => DeleteParkingPlace(place.ID)">
                                <span>Törlés</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


        <div class="modal fade @(showPopup ? "show" : "")" tabindex="-1" role="dialog" style="display: @(showPopup ? "block" : "none")">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Foglalások</h5>
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (selectedReservations == null)
                        {
                            <span>No reservations</span>
                        }
                        else
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Kezdés</th>
                                        <th>Befejezés</th>
                                        <th>Dolgozó azonosító</th>
                                        <th>Dolgozó neve</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var reservation in selectedReservations)
                                    {
                                        <tr>
                                            <td>@reservation.ID</td>
                                            <td>@reservation.Beginning</td>
                                            <td>@reservation.Ending</td>
                                            <td>@reservation.User.Id</td>
                                            <td>@reservation.User.Name</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" style="background-color: #00695C; color: white;" @onclick="ClosePopup">Bezárás</button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h3>Nincs jogosultságod az oldal megtekintéséhez!</h3>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<ParkingPlaceDto> parkingPlaces = new List<ParkingPlaceDto>();
    private ParkingPlaceDto currentPlace = new ParkingPlaceDto();
    private string Message = String.Empty;
    private string? newTodo;
    private List<ReservationDto> selectedReservations = new List<ReservationDto>();

    List<int> editingList = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        parkingPlaces = await parkingService.GetParkingPlaces();
    }

    bool showPopup = false;

    void ClosePopup()
    {
        showPopup = false;
    }

    async Task DeleteParkingPlace(int placeId)
    {
        await parkingService.DeleteParkingPlace(placeId);
        parkingPlaces.Remove(parkingPlaces.Find(x => x.ID == placeId));
    }

    void ShowReservations(int placeId)
    {
        showPopup = true;

        selectedReservations = parkingPlaces.Find(x => x.ID == placeId).Reservations.ToList();
    }

    async Task ToggleEdit(int placeId)
    {
        if (editingList.Contains(placeId))
        {
            editingList.Remove(placeId);
            await parkingService.UpdateParkingPlace(parkingPlaces.Find(x => x.ID == placeId));

        }
        else
        {
            editingList.Add(placeId);
        }
    }

    private async Task ValidateData(EditContext editContext)
    {
        if (editContext.Model is not ParkingPlaceDto currentPlace)
        {
            Message = "T-Shirt object is invalid";
            return;
        }

    }

    private async void AddParkingPlace()
    {
        parkingPlaces.Add(await parkingService.NewParkingPlace(currentPlace));

        currentPlace = new ParkingPlaceDto();
    }

}