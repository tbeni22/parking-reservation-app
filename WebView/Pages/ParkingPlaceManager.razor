@using BusinessLogic.DTOs
@using BusinessLogic.Interfaces
@page "/park"
@inject IParkingPlace parkingService


<h3>ParkingSpaceManager</h3>


<div class="container mt-4 mb-3">
    <div class="card border-dark">
        <div class="card-body">
            <div class="row">
                <div class="col-sm-6 mb-3">
                    <div class="form-group">
                        <input class="form-control" placeholder="Név" @bind="currentPlace.Name" />
                    </div>
                </div>
                <div class="col-sm-6 mb-3">
                    <div class="form-check form-group">
                        <input class="form-check-input" type="checkbox" @bind="currentPlace.DisabledParking" id="disabledCheck" />
                        <label class="form-check-label" for="disabledCheck">
                            Disabled
                        </label>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" style="width: 150px;" @onclick="AddParkingPlace">Parkolóhely felvétele</button>
            </div>
        </div>
    </div>
</div>


<table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Disabled Parking</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var place in parkingPlaces)
        {
            <tr>
                <td>@place.ID</td>
                <td>@place.Name</td>
                <td>@(place.DisabledParking ? "Yes" : "No")</td>
            </tr>
        }
    </tbody>
</table>



<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>

<h1>Todo (@todos.Count(todo => !todo.IsDone))</h1>

<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type="checkbox" @bind="todo.IsDone" />
            <input @bind="todo.Title" />
        </li>
    }
</ul>

<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>




@code {
    private List<ParkingPlaceDto> parkingPlaces = new List<ParkingPlaceDto>();
    private ParkingPlaceDto currentPlace = new ParkingPlaceDto();
    private string Message = String.Empty;

    private List<TodoItem> todos = new();
    private string? newTodo;

    protected override async Task OnInitializedAsync()
    {
        // Call the service here
        //fill parkingPLaces with example data
        /* parkingPlaces.Add(new ParkingPlaceDto() { ID = 1, Name = "Test", DisabledParking = false });
         parkingPlaces.Add(new ParkingPlaceDto() { ID = 2, Name = "Test2", DisabledParking = true });
         parkingPlaces.Add(new ParkingPlaceDto() { ID = 3, Name = "Test3", DisabledParking = false });*/

    }

    private async Task ValidateData(EditContext editContext)
    {
        if (editContext.Model is not ParkingPlaceDto currentPlace)
        {
            Message = "T-Shirt object is invalid";
            return;
        }

        // Data is valid
        parkingPlaces.Add(currentPlace);
        currentPlace = new ParkingPlaceDto() { ID = 2, Name = "Test2", DisabledParking = true };
        parkingPlaces.Add(currentPlace);
        currentPlace = new ParkingPlaceDto();
        parkingPlaces.Add(currentPlace);
        Message = "Changes saved";
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo });
            newTodo = string.Empty;
        }
    }

    private void AddParkingPlace()
    {
        parkingPlaces.Add(currentPlace);
        currentPlace = new ParkingPlaceDto();
    }

    class TodoItem
    {
        public string? Title { get; set; }
        public bool IsDone { get; set; } = false;
    }

    public class PizzaSpecial
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public decimal BasePrice { get; set; }

        public string Description { get; set; }

        public string ImageUrl { get; set; }

        public string GetFormattedBasePrice() => BasePrice.ToString("0.00");
    }

    List<PizzaSpecial> specials = new();

    protected override void OnInitialized()
    {
        specials.AddRange(new List<PizzaSpecial>
        {
            new PizzaSpecial { Name = "The Baconatorizor", BasePrice =  11.99M, Description = "It has EVERY kind of bacon", ImageUrl="img/pizzas/bacon.jpg"},
            new PizzaSpecial { Name = "Buffalo chicken", BasePrice =  12.75M, Description = "Spicy chicken, hot sauce, and blue cheese, guaranteed to warm you up", ImageUrl="img/pizzas/meaty.jpg"},
            new PizzaSpecial { Name = "Veggie Delight", BasePrice =  11.5M, Description = "It's like salad, but on a pizza", ImageUrl="img/pizzas/salad.jpg"},
            new PizzaSpecial { Name = "Margherita", BasePrice =  9.99M, Description = "Traditional Italian pizza with tomatoes and basil", ImageUrl="img/pizzas/margherita.jpg"},
            new PizzaSpecial { Name = "Basic Cheese Pizza", BasePrice =  11.99M, Description = "It's cheesy and delicious. Why wouldn't you want one?", ImageUrl="img/pizzas/cheese.jpg"},
            new PizzaSpecial { Name = "Classic pepperoni", BasePrice =  10.5M, Description = "It's the pizza you grew up with, but Blazing hot!", ImageUrl="img/pizzas/pepperoni.jpg" }
        });
    }

}
